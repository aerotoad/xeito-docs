import{_ as s,c as n,o as a,a as e}from"./app.d4db8e39.js";const C=JSON.parse('{"title":"Introduction","description":"","frontmatter":{"title":"Introduction"},"headers":[{"level":2,"title":"What is Xeito?","slug":"what-is-xeito","link":"#what-is-xeito","children":[]},{"level":2,"title":"Components","slug":"components","link":"#components","children":[]},{"level":2,"title":"Services","slug":"services","link":"#services","children":[]}],"relativePath":"guide/introduction.md"}'),o={name:"guide/introduction.md"},l=e(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">ACTIVE DEVELOPMENT</p><p><strong>Xeito</strong> is still under active development, therefore everything is still <strong>unstable</strong> and untested. API may introduce <strong>breaking changes</strong> between minor versions without much notice.</p></div><h2 id="what-is-xeito" tabindex="-1">What is Xeito? <a class="header-anchor" href="#what-is-xeito" aria-hidden="true">#</a></h2><p>Xeito (pronounced /\u02C8\u0283ejto\u031D/, <a href="https://en.wiktionary.org/wiki/xeito" target="_blank" rel="noreferrer">from Galician</a>: &quot;way&quot;, &quot;manner&quot; or &quot;fashion&quot;) is a <a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">Typescript</a> framework for building web applications.</p><p>It builds on top of the powerful features of Typescript and JSX, and provides a component-based programming model that helps you develop user applications, no matter the complexity.</p><p>Let&#39;s see an example of a barebones Xeito component:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Xeito</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@xeito/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Counter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">State</span><span style="color:#A6ACCD;">() </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">increment</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">increment</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          Count is: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Above we can see two basic features of Xeito:</p><ul><li><p><strong>JSX</strong>: Xeito uses <a href="https://www.typescriptlang.org/docs/handbook/jsx.html" target="_blank" rel="noreferrer">JSX</a> to compose the template inside the render method of a component and it allows us to declaratively declare the HTML output based on the Typescript state.</p></li><li><p><strong>Reactivity</strong>: Xeito tracks state changes automatically and updates the DOM when changes happen.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">PREREQUISITES</p><p>The documentation assumes familiarity with HTML/JSX, CSS and Typescript. Please, if you are unsure if your knowledge level will suffice, check it at <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Overview" target="_blank" rel="noreferrer">Mozilla Language Overview</a> and the <a href="https://www.typescriptlang.org/docs/handbook/intro.html" target="_blank" rel="noreferrer">Typescript Handbook</a>. Prior experience with other frameworks like React will help, but it isn&#39;t a hard requirement.</p></div><h2 id="components" tabindex="-1">Components <a class="header-anchor" href="#components" aria-hidden="true">#</a></h2><p>Components are the building blocks you will use to compose an application using Xeito. A component is just a Typescript class with a <code>@Component()</code> decorator, a <code>render()</code> method that returns the template and, optionally, style files.</p><p>The <code>@Component()</code> decorator is just syntactic sugar that helps Xeito identify a component as valid during render.</p><h2 id="services" tabindex="-1">Services <a class="header-anchor" href="#services" aria-hidden="true">#</a></h2><p>Services are a form of <strong>Dependency Injection</strong>. They allow you to have dependencies without taking care of their initialization, Xeito takes care of that for you.</p><p>In its most basic form a service is a data provider, it keeps the logic to access the data it contains and, since they&#39;re only instantiated once, can be shared between multiple components as a global state container. The main objective of the services is to organize your logic, data and functions and share it among multiple components if needed. Just like the <strong>Components</strong>, a Xeito service is just a Typescript class with a <code>@Injectable()</code> decorator that will tell Xeito it needs to instantiate it and make it accessible for the components.</p><p>After a service is created, it can be injected into a component by adding a property with the <code>@Inject()</code> decorator that has the type of the service.</p><p>This can sound confusing, but in reality it&#39;s very simple to implement. Let&#39;s see an example:</p><p>We start by creating a new service like this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#676E95;">// my-service.tsx</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Injectable</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GreeterService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">greet</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>And then we <em>inject</em> it into a component</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#676E95;">// my-component.tsx</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Inject</span><span style="color:#A6ACCD;">() </span><span style="color:#F07178;">greeterService</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GreeterService</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Now we can call the methods of the service</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">greeterService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">greet</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,22),p=[l];function t(r,c,i,y,F,D){return a(),n("div",null,p)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};

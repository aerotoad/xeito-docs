import{_ as s,c as n,o as a,a as o}from"./app.d4db8e39.js";const d=JSON.parse('{"title":"Introduction","description":"","frontmatter":{"title":"Introduction"},"headers":[{"level":2,"title":"What is Xeito?","slug":"what-is-xeito","link":"#what-is-xeito","children":[]}],"relativePath":"guide/introduction.md"}'),e={name:"guide/introduction.md"},t=o(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">ACTIVE DEVELOPMENT</p><p><strong>Xeito</strong> is still under active development, therefore everything is still <strong>unstable</strong> and untested. API may introduce <strong>breaking changes</strong> between minor versions without much notice.</p></div><h2 id="what-is-xeito" tabindex="-1">What is Xeito? <a class="header-anchor" href="#what-is-xeito" aria-hidden="true">#</a></h2><p>Xeito (pronounced /\u02C8\u0283ejto\u031D/, <a href="https://en.wiktionary.org/wiki/xeito" target="_blank" rel="noreferrer">from Galician</a>: &quot;way&quot;, &quot;manner&quot; or &quot;fashion&quot;) is a <a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">Typescript</a> framework for building web applications.</p><p>It builds on top of the powerful features of Typescript and JSX, and provides a component-based programming model that helps you develop user applications, no matter the complexity.</p><p>Let&#39;s see an example of a barebones Xeito component:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Xeito</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@xeito/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Counter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">state</span><span style="color:#A6ACCD;">() </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">increment</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">increment</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          Count is: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Above we can see two basic features of Xeito:</p><ul><li><p><strong>JSX</strong>: Xeito uses <a href="https://www.typescriptlang.org/docs/handbook/jsx.html" target="_blank" rel="noreferrer">JSX</a> to compose the template inside the render method of a component and it allows us to declaratively declare the HTML output based on the Typescript state.</p></li><li><p><strong>Reactivity</strong>: Xeito tracks state changes automatically and updates the DOM when changes happen.</p></li></ul>`,9),l=[t];function p(r,c,i,D,y,F){return a(),n("div",null,l)}const A=s(e,[["render",p]]);export{d as __pageData,A as default};
